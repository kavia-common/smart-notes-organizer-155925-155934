{"is_source_file": true, "format": "TypeScript", "description": "This file defines a NoteService for managing notes in an Angular application, including CRUD operations, filtering, and local storage persistence.", "external_files": ["../models/note.model"], "external_methods": ["isPlatformBrowser"], "published": ["NoteService"], "classes": [{"name": "NoteService", "description": "Angular service for managing notes, including creation, update, deletion, filtering, and persistence in local storage."}], "methods": [{"name": "notes$", "description": "Returns an observable stream of all notes."}, {"name": "selectedNoteId$", "description": "Returns an observable stream of the currently selected note's ID."}, {"name": "selectedNote$", "description": "Returns an observable stream of the currently selected note object."}, {"name": "searchQuery$", "description": "Returns an observable stream of the current search query string."}, {"name": "selectedFolder$", "description": "Returns an observable stream of the currently selected folder."}, {"name": "folders$", "description": "Returns an observable of unique folder names, with 'All Notes' included."}, {"name": "filteredNotes$", "description": "Returns an observable of notes filtered by search query and folder, sorted by update time."}, {"name": "setSearchQuery", "description": "Updates the search query."}, {"name": "setSelectedFolder", "description": "Sets the current folder for filtering notes."}, {"name": "selectNote", "description": "Selects a note by its ID or clears selection."}, {"name": "createNote", "description": "Creates a new note with optional initial values and selects it."}, {"name": "updateNote", "description": "Updates an existing note identified by its ID."}, {"name": "deleteNote", "description": "Deletes a note by its ID."}, {"name": "togglePinned", "description": "Toggles the pinned status of a note."}, {"name": "function generateId(): string { generateId", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["combineLatest", "map", "setItem", "getItem", "next"], "search-terms": ["NoteService", "localStorage", "Angular", "notes management", "RxJS", "behavior subject", "filter", "pinned notes", "search", "folder"], "state": 2, "file_id": 22, "knowledge_revision": 79, "git_revision": "", "revision_history": [{"45": ""}, {"77": ""}, {"79": ""}], "ctags": [{"_type": "tag", "name": "NoteService", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^export class NoteService {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "STORAGE_KEY", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^const STORAGE_KEY = 'smart-notes-notes-v1';$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "_notes$", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^  private _notes$ = new BehaviorSubject<Note[]>([]);$/", "language": "TypeScript", "kind": "property", "scope": "NoteService", "scopeKind": "class"}, {"_type": "tag", "name": "generateId", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^function generateId(): string {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "hay", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^            const hay = `${n.title} ${n.content}`.toLowerCase();$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "n", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^        for (const n of notes) {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "next", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^    const next = [note, ...this._notes$.value];$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "next", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^    const next = this._notes$.value.filter((n) => n.id !== noteId);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "next", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^    const next = this._notes$.value.map((n) =>$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "note", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^    const note: Note = {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "now", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^    const now = new Date().toISOString();$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "parsed", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^          const parsed = JSON.parse(saved) as Note[];$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "query", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^        const query = q.trim().toLowerCase();$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^        let result = [...notes];$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "saved", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^      const saved = (globalThis as any).localStorage?.getItem(STORAGE_KEY) ?? null;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "set", "path": "/home/kavia/workspace/code-generation/smart-notes-organizer-155925-155934/notes_frontend/src/app/services/note.service.ts", "pattern": "/^        const set = new Set<string>();$/", "language": "TypeScript", "kind": "constant"}], "hash": "45cc641bdc6e89b1d646ab27bd744ed1", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/app/services/note.service.ts", "fields": [{"name": "private _notes$ = new BehaviorSubject<Note[]>([]);", "scope": "NoteService", "scopeKind": "class", "description": "unavailable"}, {"name": "let result = [...notes];", "scope": "", "scopeKind": "", "description": "unavailable"}]}